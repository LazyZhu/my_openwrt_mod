#!/bin/sh /etc/rc.common

START=95

SERVICE_USE_PID=1
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1

IPSET_BLACKLIST="/etc/ipset/blacklist"
IPSET_WHITELIST="/etc/ipset/whitelist"
IPSET_RESERVE="/etc/ipset/reserve"

start() {

	ulimit -n 1024
	
	config_load "shadowsocks"
	config_get enabled config enabled
	config_get remote config remote_server
	config_get rport config remote_port
	config_get lport config local_port
	config_get cipher config cipher
	config_get pass config password
	config_get redir_enabled config redir_enabled
	config_get redir_port config redir_port
	config_get whitelist_enabled config whitelist_enabled
	config_get blacklist_enabled config blacklist_enabled
	config_get udp_enabled config udp_enabled
	config_get tunnel_enabled config tunnel_enabled
	config_get tunnel_port config tunnel_port
	config_get tunnel_forward config tunnel_forward

	[ -z "$remote" ] || [ -z "$rport" ] || [ -z "$lport" ] || [ -z "$pass" ] && {
		echo "missing parameters. check config"
		return 1
	}

	remoteip="`resolveip -4 -t10 $remote`"
	[ -z "$remoteip" ] && {
		echo "cannot resolve the server hostname"
		return 1
	}

	[ "$enabled" = '1' ] && {
		service_start /usr/bin/ss-local \
			-b "0.0.0.0" \
			-s "$remoteip" \
			-p "$rport" \
			-l "$lport" \
			${cipher:+-m $cipher} \
			-k "$pass" \
			-u
	}

	[ "$tunnel_enabled" = '1' ] && {
		service_start /usr/bin/ss-tunnel \
			-b "0.0.0.0" \
			-s "$remoteip" \
			-p "$rport" \
			-l "$tunnel_port" \
			-L "$tunnel_forward" \
			-u
	}

	[ "$redir_enabled" = '1' ] && {
		service_start /usr/bin/ss-redir \
			-b "0.0.0.0" \
			-s "$remoteip" \
			-p "$rport" \
			-l "$redir_port" \
			${cipher:+-m $cipher} \
			-k "$pass" \
			-u

		iptables -t nat -N SHADOWSOCKS

		[ "$blacklist_enabled" = '1' ] && {
			sed -e "s/^/-A blacklist &/g" \
				-e "1 i\-N blacklist nethash" \
				$IPSET_BLACKLIST | ipset -R -!
			iptables -t nat -A SHADOWSOCKS -p tcp -m set --match-set blacklist src \
				-j RETURN
		}

		if [ "$whitelist_enabled" = '1' ];then
			(echo "$remoteip";cat $IPSET_RESERVE;cat $IPSET_WHITELIST) |
			sed -e "s/^/-A whitelist &/g" \
				-e "1 i\-N whitelist nethash" |
			ipset -R -!
		else
			(echo "$remoteip";cat $IPSET_RESERVE) |
			sed -e "s/^/-A whitelist &/g" \
				-e "1 i\-N whitelist nethash" |
			ipset -R -!			
		fi

		iptables -t nat -A SHADOWSOCKS -p tcp -m set ! --match-set whitelist dst \
				-j REDIRECT --to-ports $redir_port

		[ "$udp_enabled" = '1' ] && {
			ip rule add fwmark 0x01/0x01 table 100
			ip route add local 0.0.0.0/0 dev lo table 100
			iptables -t mangle -N SS_UDP

			if [ "$blacklist_enabled" = '1' ];then
				iptables -t mangle -A SS_UDP -p udp -m set ! --match-set blacklist src \
					-j RETURN
			fi
			iptables -t mangle -A SS_UDP -p udp -m set ! --match-set whitelist dst \
					-j TPROXY --on-port $redir_port --tproxy-mark 0x01/0x01
			
			iptables -t mangle -A PREROUTING -p udp -j SS_UDP
		}

		iptables -t nat -I zone_lan_prerouting -j SHADOWSOCKS
	}
}

stop() {
	service_stop /usr/bin/ss-local
	service_stop /usr/bin/ss-tunnel
	service_stop /usr/bin/ss-redir && {
		iptables -t nat -D zone_lan_prerouting -j SHADOWSOCKS 2> /dev/null
		iptables -t mangle -D PREROUTING -p udp -j SS_UDP 2> /dev/null
		iptables -t nat -F SHADOWSOCKS 2> /dev/null
		iptables -t nat -X SHADOWSOCKS 2> /dev/null
		iptables -t mangle -F SS_UDP 2> /dev/null
		iptables -t mangle -X SS_UDP 2> /dev/null
		ip rule del fwmark 0x01/0x01 table 100 2>/dev/null
		ip route del local 0.0.0.0/0 dev lo table 100 2>/dev/null
		ipset destroy whitelist 2> /dev/null
		ipset destroy blacklist 2> /dev/null
	}
}
